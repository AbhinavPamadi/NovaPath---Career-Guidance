rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return isSignedIn() && request.auth.uid == resource.data.authorId;
    }
    
    function isValidUser(resource) {
      return isSignedIn() && 
             resource.data.keys().hasAll(['authorId', 'authorName', 'createdAt']) &&
             resource.data.authorId == request.auth.uid &&
             resource.data.authorName is string &&
             resource.data.authorName.size() > 0 &&
             resource.data.authorName.size() <= 100;
    }
    
    function isValidMentor(resource) {
      return isSignedIn() && 
             resource.data.keys().hasAll(['userId', 'name', 'email', 'bio', 'degree', 'college', 'isActive']) &&
             resource.data.userId == request.auth.uid;
    }
    
    function isValidStudyBuddy(resource) {
      return isSignedIn() && 
             resource.data.keys().hasAll(['userId', 'name', 'email', 'bio', 'examsTags', 'isActive']) &&
             resource.data.userId == request.auth.uid;
    }
    
    function isValidReview(resource) {
      return isSignedIn() && 
             resource.data.keys().hasAll(['collegeName', 'courseName', 'rating', 'content', 'authorId']) &&
             resource.data.authorId == request.auth.uid &&
             resource.data.rating >= 1 && resource.data.rating <= 5 &&
             resource.data.collegeName is string &&
             resource.data.courseName is string &&
             resource.data.content is string &&
             resource.data.collegeName.size() > 2 &&
             resource.data.courseName.size() > 2 &&
             resource.data.content.size() <= 2000;
    }

    // Users collection - users can read all profiles but only edit their own
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Questions collection
    match /questions/{questionId} {
      allow read: if true; // Public read access for educational content
      allow create: if isSignedIn() && 
                    isValidUser(request.resource) &&
                    request.resource.data.keys().hasAll(['title', 'content', 'tags']) &&
                    request.resource.data.title.size() > 5 &&
                    request.resource.data.content.size() > 10;
      allow update: if isOwner(resource) || 
                    (isSignedIn() && 
                     request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['upvotes', 'downvotes', 'views']) &&
                     request.resource.data.upvotes is number &&
                     request.resource.data.downvotes is number);
      allow delete: if isOwner(resource);
      
      // Nested replies within questions
      match /replies/{replyId} {
        allow read: if true;
        allow create: if isSignedIn() && isValidUser(request.resource);
        allow update: if isOwner(resource) ||
                      (isSignedIn() && 
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['upvotes', 'downvotes']));
        allow delete: if isOwner(resource);
      }
    }

    // Mentors collection
    match /mentors/{mentorId} {
      allow read: if true; // Public read for discovery
      allow create: if isValidMentor(request.resource);
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Mentor connections subcollection
      match /connections/{connectionId} {
        allow read: if isSignedIn() && 
                    (resource.data.mentorId == request.auth.uid ||
                     resource.data.studentId == request.auth.uid);
        allow create: if isSignedIn() && 
                      request.resource.data.studentId == request.auth.uid;
        allow update: if isSignedIn() && 
                      (resource.data.mentorId == request.auth.uid ||
                       resource.data.studentId == request.auth.uid);
        allow delete: if isSignedIn() && 
                      (resource.data.mentorId == request.auth.uid ||
                       resource.data.studentId == request.auth.uid);
      }
    }

    // Mentor connections/requests
    match /mentorConnections/{connectionId} {
      allow read: if isSignedIn() && 
                  (resource.data.mentorId == request.auth.uid ||
                   resource.data.studentId == request.auth.uid);
      allow create: if isSignedIn() && 
                    request.resource.data.studentId == request.auth.uid;
      allow update: if isSignedIn() && 
                    (resource.data.mentorId == request.auth.uid ||
                     resource.data.studentId == request.auth.uid);
      allow delete: if isSignedIn() && 
                    (resource.data.mentorId == request.auth.uid ||
                     resource.data.studentId == request.auth.uid);
    }

    // Study buddies collection
    match /studyBuddies/{buddyId} {
      allow read: if true; // Public read for discovery
      allow create: if isValidStudyBuddy(request.resource);
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Buddy connections subcollection
      match /buddyConnections/{connectionId} {
        allow read: if isSignedIn() && 
                    (resource.data.senderId == request.auth.uid ||
                     resource.data.receiverId == request.auth.uid);
        allow create: if isSignedIn() && 
                      request.resource.data.senderId == request.auth.uid;
        allow update: if isSignedIn() && 
                      (resource.data.senderId == request.auth.uid ||
                       resource.data.receiverId == request.auth.uid);
        allow delete: if isSignedIn() && 
                      (resource.data.senderId == request.auth.uid ||
                       resource.data.receiverId == request.auth.uid);
      }
    }

    // Study buddy connections
    match /buddyConnections/{connectionId} {
      allow read: if isSignedIn() && 
                  (resource.data.senderId == request.auth.uid ||
                   resource.data.receiverId == request.auth.uid);
      allow create: if isSignedIn() && 
                    request.resource.data.senderId == request.auth.uid;
      allow update: if isSignedIn() && 
                    (resource.data.senderId == request.auth.uid ||
                     resource.data.receiverId == request.auth.uid);
      allow delete: if isSignedIn() && 
                    (resource.data.senderId == request.auth.uid ||
                     resource.data.receiverId == request.auth.uid);
    }

    // Reviews collection (Reality Check)
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for educational transparency
      allow create: if isValidReview(request.resource) &&
                    request.resource.data.content.size() > 20; // Minimum review length
      allow update: if isOwner(resource) ||
                    (isSignedIn() && 
                     request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['helpful', 'notHelpful']) &&
                     request.resource.data.helpful is number &&
                     request.resource.data.notHelpful is number);
      allow delete: if isOwner(resource);
    }

    // User interactions tracking (votes, views, etc.)
    match /userInteractions/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
  }
}
